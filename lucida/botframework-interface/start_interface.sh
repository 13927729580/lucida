#!/bin/bash

if [ -f 'config.sh' ]; then
  if [ -f 'config.tmp' ]; then
    . ./config.tmp
  fi
  set -e
  . ./config.sh
  set +e
  echo "# ----- LAST STABLE CONFIGURATION ----- #" > config.tmp
  echo "#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN" >> config.tmp
  echo "BFW_UID=\"$BFW_UID\"" >> config.tmp
  echo "BFW_PWD=\"$BFW_PWD\"" >> config.tmp
  echo "BFW_SAVE_PWD=$BFW_SAVE_PWD" >> config.tmp
  echo "CC_HOST=\"$CC_HOST\"" >> config.tmp
  echo "BFW_HND=\"$BFW_HND\"" >> config.tmp
  echo "BFW_HOST=\"$BFW_HOST\"" >> config.tmp
  echo "BFW_PORT=\"$BFW_PORT\"" >> config.tmp
  echo "BFW_APPID=$BFW_APPID" >> config.tmp
  echo "BFW_APPPWD=$BFW_APPPWD" >> config.tmp
else
  echo "You'll need to answer a few questions for first time setup. To change any of these options see config.sh. To reset delete config.sh"
  echo "REMEMBER TO BACK UP YOUR APP PASSWORD BEFORE DELETING 'config.sh'"
  echo ""
  rm -f config.tmp
fi
echo "#" > config.sh
echo "# Configuration file for Lucida's BotFramework interface" >> config.sh
echo "#" >> config.sh

if [ -z $BFW_UID ]; then
  while [ 1 ]; do
    echo "Enter the email address associated with your Microsoft account. If you don't have an account create one at 'https://signup.live.com/'"
    printf "BFW_UID: "
    read BFW_UID
    echo $BFW_UID | grep -Poe "^[A-Za-z0-9_\.]+@[A-Za-z0-9\-_]+\.[A-Za-z0-9\.\-_]+$" > /dev/null
    if [ $? -ne 0 ]; then
      echo "[ERROR] Please provide a valid email address!!!"
      continue
    fi
    echo "Enter your Microsoft account password. Passwords with exclaimation marks (!), double quotes (\") and backticks (\`) are not supported"
    printf "BFW_PWD: "
    stty -echo
    read BFW_PWD
    stty echo
    echo ""
    echo $BFW_PWD | grep -Poe "^[A-Za-z0-9~\!@#\$%\^&*()\-=_+{}\|\[\];:'<>?,\./]{8,16}$" > /dev/null
    if [ $? -eq 1 ]; then
      echo "[ERROR] Please enter a valid password!!!"
      continue
    fi
    echo "[INFO] Checking account credentials... Please wait"
    while [ 1 ]; do
      export BFW_UID
      export BFW_PWD
      phantomjs check_credentials.js
      exit_code=$?
      if [ $exit_code -eq 0 ]; then
        break 2
      elif [ $exit_code -eq 500 ]; then
        sleep 1
        continue
      else
        break
      fi
    done
  done
  BFW_SAVE_PWD=
fi
echo "" >> config.sh
echo "# Microsoft account email address" >> config.sh
echo "BFW_UID=\"$BFW_UID\"" >> config.sh

if [ -z $BFW_PWD ]; then
  while [ 1 ]; do
    echo "Enter your Microsoft account password. Passwords with exclaimation marks (!), double quotes (\") and backticks (\`) are not supported"
    printf "BFW_PWD: "
    stty -echo
    read BFW_PWD
    stty echo
    echo ""
    echo $BFW_PWD | grep -Poe "^[A-Za-z0-9~\!@#\$%\^&*()\-=_+{}\|\[\];:'<>?,\./]{8,16}$" > /dev/null
    if [ $? -eq 1 ]; then
      echo "[ERROR] Please enter a valid password!!!"
    else
      break
    fi
  done
  BFW_SAVE_PWD=
fi

if [ -z $BFW_SAVE_PWD ]; then
  echo "Do you want me to save password to file? It will be saved in plain text."
  printf "BFW_SAVE_PWD [n]: "
  read BFW_SAVE_PWD
  if [ -z $BFW_SAVE_PWD ] || [[ $BFW_SAVE_PWD == "n" ]] || [[ $BFW_SAVE_PWD == "N" ]] || [[ $BFW_SAVE_PWD == "No" ]] || [[ $BFW_SAVE_PWD == "no" ]] || [[ $BFW_SAVE_PWD == "false" ]] || [[ $BFW_SAVE_PWD == "False" ]]; then
    BFW_SAVE_PWD=0
  else
    BFW_SAVE_PWD=1
  fi
fi
echo "" >> config.sh
echo "# Microsoft account password" >> config.sh
if [ $BFW_SAVE_PWD -eq 1 ]; then
  echo "BFW_PWD=\"$BFW_PWD\"" >> config.sh
else
  echo "BFW_PWD=" >> config.sh
fi
echo "" >> config.sh
echo "# Do we save Microsoft account password? (0/1)" >> config.sh
echo "BFW_SAVE_PWD=$BFW_SAVE_PWD" >> config.sh

if [ -z $CC_HOST ]; then
  while [ 1 ]; do
    echo "Enter the host:port on which command center is running (e.g. 'http://localhost:3000'). URLs with exclaimation marks ('!') are not allowed."
    echo "If you have no idea what this is you may use default [http://localhost:3000]"
    printf "CC_HOST [http://localhost:3000]: "
    read CC_HOST
    if [ -z $CC_HOST ]; then CC_HOST="http://localhost:3000"; fi
    echo $CC_HOST | grep -Poe "^(https?://)?[A-Za-z0-9\-\._~:/\?#\[\]'@\$&()*+,;=%]+$" > /dev/null
    if [ $? -eq 1 ]; then
      echo "[ERROR] Please enter a valid host!!!"
    else
      echo $CC_HOST | grep -Poe "^https?://" > /dev/null
      if [ $? -eq 1 ]; then
        CC_HOST=`echo http://$CC_HOST`
      fi
      break
    fi
  done
fi
echo "" >> config.sh
echo "# Command center URL" >> config.sh
echo "CC_HOST=\"$CC_HOST\"" >> config.sh

if [ -z $BFW_HND ]; then
  while [ 1 ]; do
    echo "Enter the handle of the bot you plan to use with Lucida. If you haven't created a bot do so at 'https://dev.botframework.com/bots/new'"
    printf "BFW_HND: "
    read BFW_HND
    echo $BFW_HND | grep -Poe "^[A-Za-z0-9_]{3,16}$" > /dev/null
    if [ $? -ne 0 ]; then
      echo "[ERROR] Please enter a valid bot handle!!!"
    else
      break
    fi
  done
fi
echo "" >> config.sh
echo "# BotFramework bot handle" >> config.sh
echo "BFW_HND=\"$BFW_HND\"" >> config.sh

if [ -z $BFW_HOST ]; then
  while [ 1 ]; do
    echo "Enter messaging endpoint (https only) on which Lucida's BotFramework interface is running (e.g. 'https://xxx.ngrok.io'). URLs with exclaimation marks ('!') are not allowed."
    echo "If you have no idea what this is you may press enter. Doing so will require you to enter your account password everytime you launch BotFramework interface or save it to config.sh"
    printf "BFW_HOST [https://xxx.ngrok.io]: "
    read BFW_HOST
    if [ -z $BFW_HOST ]; then BFW_HOST="https://xxx.ngrok.io"; fi
    echo $BFW_HOST | grep -Poe "^https://[A-Za-z0-9\-\._~:/\?#\[\]'@\$&()*+,;=%]+$" > /dev/null
    if [ $? -eq 1 ]; then
      echo "[ERROR] Please enter a valid host!!!"
    else
      break
    fi
  done
  BFW_UPDATE_ENDPOINT=1
fi
if [ -f "last_pushed_host" ]; then
  BFW_OLD_HOST=`cat last_pushed_host`
  if [[ "$BFW_OLD_HOST" != "$BFW_HOST" ]]; then
    BFW_UPDATE_ENDPOINT=1
  fi
fi

echo "" >> config.sh
echo "# BotFramework bot endpoint" >> config.sh
echo "BFW_HOST=\"$BFW_HOST\"" >> config.sh

if [ -z $BFW_PORT ]; then
  while [ 1 ]; do
    echo "Enter the port on which Lucida BotFramework interface should run. Default is 3728."
    printf "BFW_PORT [3728]: "
    read BFW_PORT
    if [ -z $BFW_PORT ]; then BFW_PORT=3728; fi
    echo $BFW_PORT | grep -Poe "^\d{2,5}$" > /dev/null
    if [ $? -eq 1 ]; then
      echo "[ERROR] Please enter a valid port!!!"
    else
      break
    fi
  done
fi
echo "" >> config.sh
echo "# BotFramework listen port" >> config.sh
echo "BFW_PORT=$BFW_PORT" >> config.sh

if [ -z $BFW_APPID ] || [ -z $BFW_APPPWD ]; then
  while [ 1 ]; do
    echo "Enter Microsoft application ID and password."
    printf "BFW_APPID: "
    read BFW_APPID
    echo $BFW_APPID | grep -Poe "^[A-Za-z0-9\-]+$" > /dev/null
    if [ $? -eq 1 ]; then
      echo "[ERROR] Please enter a valid application ID!!!"
      continue
    fi
    printf "BFW_APPPWD: "
    read BFW_APPPWD
    echo $BFW_APPPWD | grep -Poe "^[A-Za-z0-9]+$" > /dev/null
    if [ $? -eq 1 ]; then
      echo "[ERROR] Please enter a valid application password!!!"
    else
      break
    fi
  done
fi
echo "" >> config.sh
echo "# BotFramework credentials" >> config.sh
echo "BFW_APPID=\"$BFW_APPID\"" >> config.sh
echo "BFW_APPPWD=\"$BFW_APPPWD\"" >> config.sh

if [[ "$BFW_HOST" == "https://xxx.ngrok.io" ]]; then
  BFW_HOST=
  ps -ef | grep ngrok | grep http | grep $BFW_PORT > /dev/null
  if [ $? -eq 1 ]; then
    ngrok http $BFW_PORT > /dev/null & disown
    ps -ef | grep ngrok | grep http | grep $BFW_PORT > /dev/null
    if [ $? -eq 1 ]; then
      echo "[ERROR] Could not start ngrok client!!! Please fix the issue"
      exit 500
    fi
    echo "[INFO] Waiting for ngrok to go online..."
    sleep 10
  fi
  while read line; do
    ngrok_pid=`echo $line | grep -Poe "\d+(?=/ngrok)"`
    ngrok_port=`echo $line | grep -Poe "(?<=127.0.0.1:)\d+(?=[^\d])"`
    if [ ! -z $ngrok_pid ] && [ ! -z $ngrok_port ]; then
      ps -ef | grep $ngrok_pid | grep $BFW_PORT > /dev/null
      if [ $? -eq 0 ]; then
        BFW_HOST=`curl -s localhost:$ngrok_port/inspect/http | grep $BFW_PORT | grep -Poe "https://.*?ngrok.io"`
      fi
    fi
  done < <(netstat -peanut 2>/dev/null | grep LISTEN)
  if [ -z $BFW_HOST ]; then
    echo "[ERROR] Could not connect to ngrok!!! Are you connected to the internet?"
    exit 503
  fi
  BFW_UPDATE_ENDPOINT=1
fi

if [ ! -z $BFW_UPDATE_ENDPOINT ]; then
  while [ 1 ]; do
    export BFW_UID
    export BFW_PWD
    export BFW_HOST
    export BFW_HND
#    phantomjs set_endpoint.js
    exit_code=$?
    if [ $exit_code -eq 0 ]; then
      break
    elif [ $exit_code -eq 500 ]; then
      sleep 1
      continue
    else
      exit $exit_code
    fi
  done
fi
echo $BFW_HOST > last_pushed_host
rm -f config.tmp

cat << EOF > credentials.js
exports.credentials = {
  appId: '$BFW_APPID',
  appPassword: '$BFW_APPPWD'
}
EOF

node interface.js $BFW_PORT $CC_HOST
