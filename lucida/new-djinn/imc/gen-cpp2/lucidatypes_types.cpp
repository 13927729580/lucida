/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "lucidatypes_types.h"

#include "lucidatypes_types.tcc"

#include <algorithm>

namespace cpp2 {

template uint32_t QueryInput::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t QueryInput::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t QueryInput::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t QueryInput::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t QueryInput::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t QueryInput::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t QueryInput::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t QueryInput::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void QueryInput::__clear() {
  type = std::string();
  data.clear();
  tags.clear();
  __isset.__clear();
}

bool QueryInput::operator==(const QueryInput& rhs) const {
  if (!((type == rhs.type))) {
    return false;
  }
  if (!((data == rhs.data))) {
    return false;
  }
  if (!((tags == rhs.tags))) {
    return false;
  }
  return true;
}

const std::vector<std::string>& QueryInput::get_data() const& {
  return data;
}

std::vector<std::string> QueryInput::get_data() && {
  return std::move(data);
}

const std::vector<std::string>& QueryInput::get_tags() const& {
  return tags;
}

std::vector<std::string> QueryInput::get_tags() && {
  return std::move(tags);
}

void swap(QueryInput& a, QueryInput& b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.data, b.data);
  swap(a.tags, b.tags);
  swap(a.__isset, b.__isset);
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template uint32_t QuerySpec::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t QuerySpec::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t QuerySpec::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t QuerySpec::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t QuerySpec::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t QuerySpec::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t QuerySpec::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t QuerySpec::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void QuerySpec::__clear() {
  name = std::string();
  content.clear();
  __isset.__clear();
}

bool QuerySpec::operator==(const QuerySpec& rhs) const {
  if (!((name == rhs.name))) {
    return false;
  }
  if (!((content == rhs.content))) {
    return false;
  }
  return true;
}

const std::vector< ::cpp2::QueryInput>& QuerySpec::get_content() const& {
  return content;
}

std::vector< ::cpp2::QueryInput> QuerySpec::get_content() && {
  return std::move(content);
}

void swap(QuerySpec& a, QuerySpec& b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

} // cpp2