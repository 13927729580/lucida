/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "LucidaService.h"

#include "LucidaService.tcc"

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace cpp2 {

const char* LucidaServiceAsyncClient::getServiceName() {
  return "LucidaService";
}

void LucidaServiceAsyncClient::create(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& spec) {
  ::apache::thrift::RpcOptions rpcOptions;
  create(rpcOptions, std::move(callback), LUCID, spec);
}

void LucidaServiceAsyncClient::create(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& spec) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      createT(&writer, rpcOptions, std::move(callback), LUCID, spec);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      createT(&writer, rpcOptions, std::move(callback), LUCID, spec);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void LucidaServiceAsyncClient::sync_create(const std::string& LUCID, const  ::cpp2::QuerySpec& spec) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_create(rpcOptions, LUCID, spec);
}

void LucidaServiceAsyncClient::sync_create(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& spec) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback0 = folly::make_unique<apache::thrift::ClientSyncCallback>(&_returnState, getChannel()->getEventBase(), false);
  create(rpcOptions, std::move(callback0), LUCID, spec);
  getChannel()->getEventBase()->loopForever();
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_create(_returnState);
}

folly::Future<folly::Unit> LucidaServiceAsyncClient::future_create(const std::string& LUCID, const  ::cpp2::QuerySpec& spec) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_create(rpcOptions, LUCID, spec);
}

folly::Future<folly::Unit> LucidaServiceAsyncClient::future_create(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& spec) {
  folly::Promise<folly::Unit> promise1;
  auto future2 = promise1.getFuture();
  auto callback3 = folly::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(promise1), recv_wrapped_create, channel_);
  create(rpcOptions, std::move(callback3), LUCID, spec);
  return future2;
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> LucidaServiceAsyncClient::header_future_create(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& spec) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> promise4;
  auto future5 = promise4.getFuture();
  auto callback6 = folly::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(promise4), recv_wrapped_create, channel_);
  create(rpcOptions, std::move(callback6), LUCID, spec);
  return future5;
}

void LucidaServiceAsyncClient::create(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& spec) {
  create(folly::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)),LUCID,spec);
}

folly::exception_wrapper LucidaServiceAsyncClient::recv_wrapped_create(::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_createT(&reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_createT(&reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void LucidaServiceAsyncClient::recv_create(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_create(state);
  if (ew) {
    ew.throwException();
  }
}

void LucidaServiceAsyncClient::recv_instance_create(::apache::thrift::ClientReceiveState& state) {
  recv_create(state);
}

folly::exception_wrapper LucidaServiceAsyncClient::recv_instance_wrapped_create(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_create(state);
}

void LucidaServiceAsyncClient::learn(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge) {
  ::apache::thrift::RpcOptions rpcOptions;
  learn(rpcOptions, std::move(callback), LUCID, knowledge);
}

void LucidaServiceAsyncClient::learn(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      learnT(&writer, rpcOptions, std::move(callback), LUCID, knowledge);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      learnT(&writer, rpcOptions, std::move(callback), LUCID, knowledge);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void LucidaServiceAsyncClient::sync_learn(const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_learn(rpcOptions, LUCID, knowledge);
}

void LucidaServiceAsyncClient::sync_learn(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback7 = folly::make_unique<apache::thrift::ClientSyncCallback>(&_returnState, getChannel()->getEventBase(), false);
  learn(rpcOptions, std::move(callback7), LUCID, knowledge);
  getChannel()->getEventBase()->loopForever();
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_learn(_returnState);
}

folly::Future<folly::Unit> LucidaServiceAsyncClient::future_learn(const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_learn(rpcOptions, LUCID, knowledge);
}

folly::Future<folly::Unit> LucidaServiceAsyncClient::future_learn(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge) {
  folly::Promise<folly::Unit> promise8;
  auto future9 = promise8.getFuture();
  auto callback10 = folly::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(promise8), recv_wrapped_learn, channel_);
  learn(rpcOptions, std::move(callback10), LUCID, knowledge);
  return future9;
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> LucidaServiceAsyncClient::header_future_learn(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> promise11;
  auto future12 = promise11.getFuture();
  auto callback13 = folly::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(promise11), recv_wrapped_learn, channel_);
  learn(rpcOptions, std::move(callback13), LUCID, knowledge);
  return future12;
}

void LucidaServiceAsyncClient::learn(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge) {
  learn(folly::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)),LUCID,knowledge);
}

folly::exception_wrapper LucidaServiceAsyncClient::recv_wrapped_learn(::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_learnT(&reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_learnT(&reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void LucidaServiceAsyncClient::recv_learn(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_learn(state);
  if (ew) {
    ew.throwException();
  }
}

void LucidaServiceAsyncClient::recv_instance_learn(::apache::thrift::ClientReceiveState& state) {
  recv_learn(state);
}

folly::exception_wrapper LucidaServiceAsyncClient::recv_instance_wrapped_learn(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_learn(state);
}

void LucidaServiceAsyncClient::infer(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& query) {
  ::apache::thrift::RpcOptions rpcOptions;
  infer(rpcOptions, std::move(callback), LUCID, query);
}

void LucidaServiceAsyncClient::infer(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& query) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      inferT(&writer, rpcOptions, std::move(callback), LUCID, query);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      inferT(&writer, rpcOptions, std::move(callback), LUCID, query);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void LucidaServiceAsyncClient::sync_infer(std::string& _return, const std::string& LUCID, const  ::cpp2::QuerySpec& query) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_infer(rpcOptions, _return, LUCID, query);
}

void LucidaServiceAsyncClient::sync_infer(apache::thrift::RpcOptions& rpcOptions, std::string& _return, const std::string& LUCID, const  ::cpp2::QuerySpec& query) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback14 = folly::make_unique<apache::thrift::ClientSyncCallback>(&_returnState, getChannel()->getEventBase(), false);
  infer(rpcOptions, std::move(callback14), LUCID, query);
  getChannel()->getEventBase()->loopForever();
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_infer(_return, _returnState);
}

folly::Future<std::string> LucidaServiceAsyncClient::future_infer(const std::string& LUCID, const  ::cpp2::QuerySpec& query) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_infer(rpcOptions, LUCID, query);
}

folly::Future<std::string> LucidaServiceAsyncClient::future_infer(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& query) {
  folly::Promise<std::string> promise15;
  auto future16 = promise15.getFuture();
  auto callback17 = folly::make_unique<apache::thrift::FutureCallback<std::string>>(std::move(promise15), recv_wrapped_infer, channel_);
  infer(rpcOptions, std::move(callback17), LUCID, query);
  return future16;
}

folly::Future<std::pair<std::string, std::unique_ptr<apache::thrift::transport::THeader>>> LucidaServiceAsyncClient::header_future_infer(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& query) {
  folly::Promise<std::pair<std::string, std::unique_ptr<apache::thrift::transport::THeader>>> promise18;
  auto future19 = promise18.getFuture();
  auto callback20 = folly::make_unique<apache::thrift::HeaderFutureCallback<std::string>>(std::move(promise18), recv_wrapped_infer, channel_);
  infer(rpcOptions, std::move(callback20), LUCID, query);
  return future19;
}

void LucidaServiceAsyncClient::infer(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& query) {
  infer(folly::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)),LUCID,query);
}

folly::exception_wrapper LucidaServiceAsyncClient::recv_wrapped_infer(std::string& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_inferT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_inferT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void LucidaServiceAsyncClient::recv_infer(std::string& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_infer(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void LucidaServiceAsyncClient::recv_instance_infer(std::string& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_infer(_return, state);
}

folly::exception_wrapper LucidaServiceAsyncClient::recv_instance_wrapped_infer(std::string& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_infer(_return, state);
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift