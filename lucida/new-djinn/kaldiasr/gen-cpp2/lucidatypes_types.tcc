/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "lucidatypes_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace cpp2 {

template <typename T_QueryInput_data_struct_setter>
std::vector<std::string>& QueryInput::set_data(T_QueryInput_data_struct_setter&& data_) {
  data = std::forward<T_QueryInput_data_struct_setter>(data_);
  __isset.data = true;
  return data;
}

template <typename T_QueryInput_tags_struct_setter>
std::vector<std::string>& QueryInput::set_tags(T_QueryInput_tags_struct_setter&& tags_) {
  tags = std::forward<T_QueryInput_tags_struct_setter>(tags_);
  __isset.tags = true;
  return tags;
}

template <class Protocol_>
uint32_t QueryInput::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "type") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "data") {
        fid = 2;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "tags") {
        fid = 3;
        ftype = apache::thrift::protocol::T_LIST;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->data = std::vector<std::string>();
          uint32_t _size0;
          apache::thrift::protocol::TType _etype3;
          xfer += iprot->readListBegin(_etype3, _size0);
          uint32_t _i4;
          if (_size0 == std::numeric_limits<uint32_t>::max()) {
            for (_i4 = 0; iprot->peekList(); _i4++) {
              this->data.resize(_i4 + 1);
              xfer += iprot->readString(this->data[_i4]);
            }
          }
          else {
            this->data.resize(_size0);
            for (_i4 = 0; _i4 < _size0; ++_i4) {
              xfer += iprot->readString(this->data[_i4]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->tags = std::vector<std::string>();
          uint32_t _size5;
          apache::thrift::protocol::TType _etype8;
          xfer += iprot->readListBegin(_etype8, _size5);
          uint32_t _i9;
          if (_size5 == std::numeric_limits<uint32_t>::max()) {
            for (_i9 = 0; iprot->peekList(); _i9++) {
              this->tags.resize(_i9 + 1);
              xfer += iprot->readString(this->tags[_i9]);
            }
          }
          else {
            this->tags.resize(_size5);
            for (_i9 = 0; _i9 < _size5; ++_i9) {
              xfer += iprot->readString(this->tags[_i9]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t QueryInput::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("QueryInput");
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->type);
  xfer += prot_->serializedFieldSize("data", apache::thrift::protocol::T_LIST, 2);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->data.size());
  for (auto _iter10 = this->data.begin(); _iter10 != this->data.end(); ++_iter10) {
    xfer += prot_->serializedSizeString((*_iter10));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("tags", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->tags.size());
  for (auto _iter11 = this->tags.begin(); _iter11 != this->tags.end(); ++_iter11) {
    xfer += prot_->serializedSizeString((*_iter11));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t QueryInput::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("QueryInput");
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->type);
  xfer += prot_->serializedFieldSize("data", apache::thrift::protocol::T_LIST, 2);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->data.size());
  for (auto _iter12 = this->data.begin(); _iter12 != this->data.end(); ++_iter12) {
    xfer += prot_->serializedSizeString((*_iter12));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("tags", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->tags.size());
  for (auto _iter13 = this->tags.begin(); _iter13 != this->tags.end(); ++_iter13) {
    xfer += prot_->serializedSizeString((*_iter13));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t QueryInput::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("QueryInput");
  xfer += prot_->writeFieldBegin("type", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->type);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("data", apache::thrift::protocol::T_LIST, 2);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, this->data.size());
  for (auto _iter14 = this->data.begin(); _iter14 != this->data.end(); ++_iter14) {
    xfer += prot_->writeString((*_iter14));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("tags", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, this->tags.size());
  for (auto _iter15 = this->tags.begin(); _iter15 != this->tags.end(); ++_iter15) {
    xfer += prot_->writeString((*_iter15));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <typename T_QuerySpec_content_struct_setter>
std::vector< ::cpp2::QueryInput>& QuerySpec::set_content(T_QuerySpec_content_struct_setter&& content_) {
  content = std::forward<T_QuerySpec_content_struct_setter>(content_);
  __isset.content = true;
  return content;
}

template <class Protocol_>
uint32_t QuerySpec::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "name") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "content") {
        fid = 2;
        ftype = apache::thrift::protocol::T_LIST;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->content = std::vector< ::cpp2::QueryInput>();
          uint32_t _size16;
          apache::thrift::protocol::TType _etype19;
          xfer += iprot->readListBegin(_etype19, _size16);
          uint32_t _i20;
          if (_size16 == std::numeric_limits<uint32_t>::max()) {
            for (_i20 = 0; iprot->peekList(); _i20++) {
              this->content.resize(_i20 + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::QueryInput>::read(iprot, &this->content[_i20]);
            }
          }
          else {
            this->content.resize(_size16);
            for (_i20 = 0; _i20 < _size16; ++_i20) {
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::QueryInput>::read(iprot, &this->content[_i20]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t QuerySpec::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("QuerySpec");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("content", apache::thrift::protocol::T_LIST, 2);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->content.size());
  for (auto _iter21 = this->content.begin(); _iter21 != this->content.end(); ++_iter21) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::QueryInput>::serializedSize(prot_, &(*_iter21));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t QuerySpec::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("QuerySpec");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("content", apache::thrift::protocol::T_LIST, 2);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->content.size());
  for (auto _iter22 = this->content.begin(); _iter22 != this->content.end(); ++_iter22) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::QueryInput>::serializedSizeZC(prot_, &(*_iter22));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t QuerySpec::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("QuerySpec");
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("content", apache::thrift::protocol::T_LIST, 2);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, this->content.size());
  for (auto _iter23 = this->content.begin(); _iter23 != this->content.end(); ++_iter23) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::QueryInput>::write(prot_, &(*_iter23));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

} // cpp2