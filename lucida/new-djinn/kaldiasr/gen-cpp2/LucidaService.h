/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/ServiceIncludes.h>
#include <thrift/lib/cpp2/async/HeaderChannel.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include <folly/futures/Future.h>
#include "lucidaservice_types.h"

#include "lucidatypes_types.h"


namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace cpp2 {

class LucidaServiceSvAsyncIf {
 public:
  virtual ~LucidaServiceSvAsyncIf() {}
  virtual void async_tm_create(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, std::unique_ptr<std::string> LUCID, std::unique_ptr< ::cpp2::QuerySpec> spec) = 0;
  virtual void async_create(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, std::unique_ptr<std::string> LUCID, std::unique_ptr< ::cpp2::QuerySpec> spec) = delete;
  virtual folly::Future<folly::Unit> future_create(std::unique_ptr<std::string> LUCID, std::unique_ptr< ::cpp2::QuerySpec> spec) = 0;
  virtual void async_tm_learn(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, std::unique_ptr<std::string> LUCID, std::unique_ptr< ::cpp2::QuerySpec> knowledge) = 0;
  virtual void async_learn(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, std::unique_ptr<std::string> LUCID, std::unique_ptr< ::cpp2::QuerySpec> knowledge) = delete;
  virtual folly::Future<folly::Unit> future_learn(std::unique_ptr<std::string> LUCID, std::unique_ptr< ::cpp2::QuerySpec> knowledge) = 0;
  virtual void async_tm_infer(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, std::unique_ptr<std::string> LUCID, std::unique_ptr< ::cpp2::QuerySpec> query) = 0;
  virtual void async_infer(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, std::unique_ptr<std::string> LUCID, std::unique_ptr< ::cpp2::QuerySpec> query) = delete;
  virtual folly::Future<std::unique_ptr<std::string>> future_infer(std::unique_ptr<std::string> LUCID, std::unique_ptr< ::cpp2::QuerySpec> query) = 0;
};

class LucidaServiceAsyncProcessor;

class LucidaServiceSvIf : public LucidaServiceSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef LucidaServiceAsyncProcessor ProcessorType;

  virtual ~LucidaServiceSvIf() {}
  virtual std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor();
  virtual void create(std::unique_ptr<std::string> /*LUCID*/, std::unique_ptr< ::cpp2::QuerySpec> /*spec*/);
  folly::Future<folly::Unit> future_create(std::unique_ptr<std::string> LUCID, std::unique_ptr< ::cpp2::QuerySpec> spec);
  virtual void async_tm_create(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, std::unique_ptr<std::string> LUCID, std::unique_ptr< ::cpp2::QuerySpec> spec);
  virtual void learn(std::unique_ptr<std::string> /*LUCID*/, std::unique_ptr< ::cpp2::QuerySpec> /*knowledge*/);
  folly::Future<folly::Unit> future_learn(std::unique_ptr<std::string> LUCID, std::unique_ptr< ::cpp2::QuerySpec> knowledge);
  virtual void async_tm_learn(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, std::unique_ptr<std::string> LUCID, std::unique_ptr< ::cpp2::QuerySpec> knowledge);
  virtual void infer(std::string& /*_return*/, std::unique_ptr<std::string> /*LUCID*/, std::unique_ptr< ::cpp2::QuerySpec> /*query*/);
  folly::Future<std::unique_ptr<std::string>> future_infer(std::unique_ptr<std::string> LUCID, std::unique_ptr< ::cpp2::QuerySpec> query);
  virtual void async_tm_infer(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, std::unique_ptr<std::string> LUCID, std::unique_ptr< ::cpp2::QuerySpec> query);
};

class LucidaServiceSvNull : public LucidaServiceSvIf {
 public:
  virtual ~LucidaServiceSvNull() {}
  virtual void create(std::unique_ptr<std::string> /*LUCID*/, std::unique_ptr< ::cpp2::QuerySpec> /*spec*/);
  virtual void learn(std::unique_ptr<std::string> /*LUCID*/, std::unique_ptr< ::cpp2::QuerySpec> /*knowledge*/);
  virtual void infer(std::string& /*_return*/, std::unique_ptr<std::string> /*LUCID*/, std::unique_ptr< ::cpp2::QuerySpec> /*query*/);
};

class LucidaServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  virtual const char* getServiceName();
  using BaseAsyncProcessor = void;
 protected:
  LucidaServiceSvIf* iface_;
  virtual folly::Optional<std::string> getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType);
 public:
  virtual void process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
 protected:
  virtual bool isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header);
 private:
  static std::unordered_set<std::string> onewayMethods_;
  static std::unordered_map<std::string, int16_t> cacheKeyMap_;
 public:
  using BinaryProtocolProcessFunc = ProcessFunc<LucidaServiceAsyncProcessor, apache::thrift::BinaryProtocolReader>;
  using BinaryProtocolProcessMap = ProcessMap<BinaryProtocolProcessFunc>;
  static const LucidaServiceAsyncProcessor::BinaryProtocolProcessMap& getBinaryProtocolProcessMap();
 private:
  static LucidaServiceAsyncProcessor::BinaryProtocolProcessMap binaryProcessMap_;
 public:
  using CompactProtocolProcessFunc = ProcessFunc<LucidaServiceAsyncProcessor, apache::thrift::CompactProtocolReader>;
  using CompactProtocolProcessMap = ProcessMap<CompactProtocolProcessFunc>;
  static const LucidaServiceAsyncProcessor::CompactProtocolProcessMap& getCompactProtocolProcessMap();
 private:
  static LucidaServiceAsyncProcessor::CompactProtocolProcessMap compactProcessMap_;
 private:
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_create(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_create(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_create(int32_t protoSeqId, apache::thrift::ContextStack* ctx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_create(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_create(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_learn(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_learn(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_learn(int32_t protoSeqId, apache::thrift::ContextStack* ctx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_learn(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_learn(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_infer(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_infer(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_infer(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::string const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_infer(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_infer(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  LucidaServiceAsyncProcessor(LucidaServiceSvIf* iface) :
      iface_(iface) {}

  virtual ~LucidaServiceAsyncProcessor() {}
};

class LucidaServiceAsyncClient : public apache::thrift::TClientBase {
 public:
  virtual const char* getServiceName();
  typedef std::unique_ptr<apache::thrift::RequestChannel, folly::DelayedDestruction::Destructor> channel_ptr;

  virtual ~LucidaServiceAsyncClient() {}

  LucidaServiceAsyncClient(std::shared_ptr<apache::thrift::RequestChannel> channel) :
      channel_(channel) {
    connectionContext_.reset(new apache::thrift::Cpp2ConnContext);
  }

  apache::thrift::RequestChannel*  getChannel() {
    return this->channel_.get();
  }

  apache::thrift::HeaderChannel*  getHeaderChannel() {
    return dynamic_cast<apache::thrift::HeaderChannel*>(this->channel_.get());
  }
  virtual void create(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& spec);
  virtual void create(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& spec);
  virtual void sync_create(const std::string& LUCID, const  ::cpp2::QuerySpec& spec);
  virtual void sync_create(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& spec);
  virtual folly::Future<folly::Unit> future_create(const std::string& LUCID, const  ::cpp2::QuerySpec& spec);
  virtual folly::Future<folly::Unit> future_create(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& spec);
  virtual folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_create(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& spec);
  virtual void create(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& spec);
  static folly::exception_wrapper recv_wrapped_create(::apache::thrift::ClientReceiveState& state);
  static void recv_create(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_create(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_create(::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void createT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& spec);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_createT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_createT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
  virtual void learn(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge);
  virtual void learn(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge);
  virtual void sync_learn(const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge);
  virtual void sync_learn(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge);
  virtual folly::Future<folly::Unit> future_learn(const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge);
  virtual folly::Future<folly::Unit> future_learn(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge);
  virtual folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_learn(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge);
  virtual void learn(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge);
  static folly::exception_wrapper recv_wrapped_learn(::apache::thrift::ClientReceiveState& state);
  static void recv_learn(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_learn(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_learn(::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void learnT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& knowledge);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_learnT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_learnT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
  virtual void infer(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& query);
  virtual void infer(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& query);
  virtual void sync_infer(std::string& _return, const std::string& LUCID, const  ::cpp2::QuerySpec& query);
  virtual void sync_infer(apache::thrift::RpcOptions& rpcOptions, std::string& _return, const std::string& LUCID, const  ::cpp2::QuerySpec& query);
  virtual folly::Future<std::string> future_infer(const std::string& LUCID, const  ::cpp2::QuerySpec& query);
  virtual folly::Future<std::string> future_infer(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& query);
  virtual folly::Future<std::pair<std::string, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_infer(apache::thrift::RpcOptions& rpcOptions, const std::string& LUCID, const  ::cpp2::QuerySpec& query);
  virtual void infer(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& query);
  static folly::exception_wrapper recv_wrapped_infer(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_infer(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_infer(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_infer(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void inferT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& LUCID, const  ::cpp2::QuerySpec& query);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_inferT(Protocol_* prot, std::string& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_inferT(Protocol_* prot, std::string& _return, ::apache::thrift::ClientReceiveState& state);
 protected:
  std::unique_ptr<apache::thrift::Cpp2ConnContext> connectionContext_;
  std::shared_ptr<apache::thrift::RequestChannel> channel_;
};

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift